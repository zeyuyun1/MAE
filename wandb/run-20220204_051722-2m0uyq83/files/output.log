
Adjusting learning rate of group 0 to 2.6367e-06.



















 98%|██████████████████████████████████████████ | 96/98 [00:41<00:00,  2.58it/s]
Adjusting learning rate of group 0 to 5.2734e-06.
100%|███████████████████████████████████████████| 98/98 [00:42<00:00,  2.33it/s]



















 98%|██████████████████████████████████████████ | 96/98 [00:38<00:00,  2.49it/s]
Adjusting learning rate of group 0 to 7.9102e-06.
100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.49it/s]



















100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.50it/s]
Adjusting learning rate of group 0 to 1.0547e-05.
In epoch 2, average traning loss is 0.17768739391954577.


















 96%|█████████████████████████████████████████▏ | 94/98 [00:37<00:01,  2.50it/s]
Adjusting learning rate of group 0 to 1.3184e-05.
100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.49it/s]



















 96%|█████████████████████████████████████████▏ | 94/98 [00:37<00:01,  2.43it/s]
Adjusting learning rate of group 0 to 1.5820e-05.
100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.48it/s]



















 97%|█████████████████████████████████████████▋ | 95/98 [00:38<00:01,  2.57it/s]
Adjusting learning rate of group 0 to 1.8457e-05.
100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.50it/s]



















 98%|██████████████████████████████████████████ | 96/98 [00:38<00:00,  2.49it/s]
Adjusting learning rate of group 0 to 2.1094e-05.
100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.49it/s]



















100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.78it/s]
Adjusting learning rate of group 0 to 2.3730e-05.
100%|███████████████████████████████████████████| 98/98 [00:39<00:00,  2.50it/s]






 37%|███████████████▊                           | 36/98 [00:14<00:25,  2.46it/s]
Traceback (most recent call last):
  File "mae_pretrain.py", line 60, in <module>
    predicted_img, mask = model(img)
  File "/home/zeyuy/miniconda3/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1051, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/zeyuy/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 168, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/home/zeyuy/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/data_parallel.py", line 178, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/home/zeyuy/miniconda3/lib/python3.8/site-packages/torch/nn/parallel/parallel_apply.py", line 78, in parallel_apply
    thread.join()
  File "/home/zeyuy/miniconda3/lib/python3.8/threading.py", line 1011, in join
    self._wait_for_tstate_lock()
  File "/home/zeyuy/miniconda3/lib/python3.8/threading.py", line 1027, in _wait_for_tstate_lock
    elif lock.acquire(block, timeout):
KeyboardInterrupt